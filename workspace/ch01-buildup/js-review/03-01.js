function func(data1, data2) {
  data1 += 10;
  data2[0] += 10;
  console.log(data1, data2[0]);
}

var d1 = 80;  // number 원시형 데이터 타입 - 변수 d1 에 해당하는 메모리에 80 을 저장
var d2 = [80];  // array(object) 참조형 데이터 타입 - 변수 d2 에 해당하는 값을 저장한 '메모리의 주소'를 저장

console.log(typeof d1, typeof d2);

console.log('===== 함수 호출 이전 =====');
console.log(d1, d2[0]);

console.log('===== 함수 호출 =====');
func(d1, d2); // 90, 90

// data1 에는 d1 의 값을, data2 에는 d2 의 값을 할당
// data1 에는 80 을, data2 에는 d2 의 메모리 주소를 할당.
// data1 의 값을 수정하는 경우, d1 의 값(80)을 복사하고 해당 값을 수정 - 원본 d1 값은 영향을 주지 않음
// data2 의 값을 수정하는 경우, d2 의 값(메모리 주소)을 복사하고 메모리 주소에 해당하는 메모리에 저장된 값을 수정 - 원본 d2 값이 동시에 변경됨

console.log('===== 함수 호출 이후 =====');
console.log(d1, d2[0]);

// primitive, reference type data 에 따라서 값이 변경 여부가 다르다
// 변수 정의 시 메모리에 저장되는 방식에 따라 차이가 발생

// 원시형 데이터 타입은 일정 메모리 공간이 확보되어 있음 -> 데이터를 복사하는 경우, 새로운 메모리를 할당하고 데이터를 저장하는 것이 자원(메모리, 시간) 측면에서 효율적
// 참조형 데이터 타입은 메모리 공간이 고정적이지 않고, 내부의 데이터 양만큼 조정 가능 -> 데이터를 복사할 때 직접 데이터를 새로운 메모리를 할당, 저장하는 것보다는 데이터가 저장되어 있는 메모리 주소를 참조하는 것이 효율적
// 강사님 예시 : 국어노트 10p, 수학노트 1000p